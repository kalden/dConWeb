<?php
	include("components/environment.php");
	include("components/menu.php");
	include("components/sidemenu.php");
	
	PrintHeader("Automatic Methods for Domain Assignments");
	
	print '
	  <table width="95%"  border="0" cellspacing="0" cellpadding="0">
		<tr align="left">
		  <td valign="top">';
		  PrintSideMenuBox("Methods",GetSideMenuItems("Methods","Automatic Methods",null,null));
		  print '
		  </td>
		  <td valign="top" align="left">        <div id="textheading">Automatic Methods for Domain Assignments. </div>
		<div id="textinfo">
		<div id="highlight2">
		<ul>
        <li><a href="auto.php#overview">Overview </a></li>
        <li><a href="auto.php#AUTHORS_description">What do all methods (automatic and human experts) do well? </a></li>
        <li><a href="auto.php#Only%20automataic%20methods">What do <strong>only</strong> automatic methods do well? </a></li>
        <li><a href="auto.php#difficult%20for%20automatic%20methods">What is difficult for automatic methods? </a></li>
        <li><a href="auto.php#bechmarking%20using%20consensus">Benchmarking automatic methods using consensus approach </a></li>
        <li><a href="auto.php#DALI_analysis">DALI </a></li>
        <li><a href="auto.php#DomainParser_analysis">DomainParser </a></li>
        <li><a href="auto.php#pdp_analysis">PDP </a></li>
        <li><a href="auto.php#Improving%20automatic%20methods">How can we improve automatic methods? </a></li>
		</ul>
		</div>
		</div>
        <div id="textsubheading"><a name="overview">Overview. </a></div>
		<div id="textinfo">
        <p>Three completely automatic domain assignment methods are investigated: DALI, DomainParser and PDP. </p>
        <p><a name="DALI description"><strong>DALI</strong> : </a><a href="bibliography.htm#DALI">Distance  mAtrix aLIgnment </a>, is based on local compactness as well as recurrence of the structures (as an estimate of their evolutionary significance).&nbsp; <a href="auto.php#DALI_analysis">Analysis.</a>&nbsp; More results. </p>
        <p><a name="DomainParser Description"><strong>DomainParser</strong> :&nbsp; </a>algorithm approaches structure decoposition by attempting to find the minimal cut through domain interfaces; graph-theoretical approach is used ( <a href="bibliography.htm#DomainParser">ref </a>) . <a href="auto.php#DomainParser_analysis">Analysis</a>.&nbsp; More results. </p>
        <p><a name="PDP description"><strong>PDP </strong></a>: <a href="bibliography.htm#PDP">Protein Domain Parser</a> algorithm a most recent algorithm for domain decomposition uses domain compactness as a chief principle. <a href="auto.php#PDP_analysis">Analysis</a>. More results. </p>
        </div>
		<div id="textsubheading"><a name="all_methods_do_well">What do all methods (automatic and experts) do well? </a></div>
		<div id="textinfo">
        <p>The six assignment methods agree on domain assignment in 71% of all analyzed chains. Analysis of this subset of chains – a complete consensus subset – reveals the basic principles of structural domain assignment that are captured well by all methods. </p>
        <p><strong>Cases of chains with </strong><strong><em>complete consensus </em> among methods </strong></p>
        <p>There are 328 chains in the 467-chain dataset for which all six methods agree on the number of domains (i.e., the three algorithmic methods agree with the <strong><em>experts\' consensus </em></strong>). These chains have some fundamental features that are obvious to experts and can easily be captured by algorithms. The majority (over 80%) are a / b structures with a broad range is size - from 58 residues (Figure 1A) to 491 residues (Figure 1B); other types of structures include helical bundles (Figure 1C) and b -structures (Figure 1D). Single domain chains for which there is a complete consensus appear to be of two types: small/compact structures and large structures with a well-defined architecture. </p>';
        print '
        <p>There are 24 two-domain chains (7.3% of the complete consensus subset), ranging in size from 145 to 265 residues. Most of the 2-domain chains in this group have two very distinct lobes containing a b -structure component or are all- b (Figure 1E, F). Less trivial cases consist of two a / b domains that are not clearly separated (Figure 1G, H) and in order to define domains, individual secondary structures have to be cut. In all cases of complete consensus there is good agreement among assignments with respect to the domain boundaries as well as domain number. </p>
        <p>There are four 3-domain chains (1.2 % of the complete consensus subset), ranging in size from 381 to 585 residues. All cases are a / b structure with 3-fold symmetry. The boundaries between domains are more difficult to draw: in at least one case individual helices close to the domain boundaries are assigned differently by different experts (Figure 71). The only 4-domain chain for which all methods agree is 171 residues long and consists of 4 very small b -structures connected by loops (Figure 1J). </p>
        <p><img src="resources/all_do_well.jpg" height="545" width="887"></p>
        <p><strong>Figure 1. Examples of complete consensus among methods and conflicting consensuses. A-J. </strong>All methods agreed on the number of domains. Domain boundaries are shown for the AUTHORS assignments. <strong></strong>In the case of one domain assignment, the entire chain is considered a domain. <strong>K-M </strong>Algorithmic consensus is different from expert consensus. <strong></strong><strong>A. 8pti </strong><em>bovine pancreatic trypsin inhibitor, </em>1 domain; <strong> B. 1btc </strong><em>soybean b -amylase, </em>1 domain; <strong>C. 1mrr </strong><em>E.coli ribonucleotide reductase, </em>1 domain; <strong> D. 5nn9 </strong><em>influenza virus neuroamidase </em>, 1 domain <strong>; E. 1hil </strong><em>specific antibody Fab 17/9, </em>2 domains (domain1 1-104; domain2 110-211); <strong>F. 1gdh </strong><em>NAD-dependant D-glycerate dehydrogenase, </em>2 domains (domain1 2-99, 291-321; domain2 100-290); <strong> G. 8atc </strong><em>aspartate carbonyltransferase, </em>2 domains (domain1 1-137, 288-310; domain2 144-283); <strong>H. tbpa </strong><em>yeast TATA-binding protein, </em>2 domains (domain1 61-71, 159-240; domain2 72-158); <strong>I. 1npx </strong><em>NADH peroxidase, </em>3 domains (domain11-115, 242-325; domain2 116-241; domain3 326-447); <strong>J. 9wga </strong><em>wheat germ agglutinin, </em>4 domains (domain1 2-43; domain2 44-83; domain3 84-120; domain4 121-171), <strong>K </strong>. <strong>2drpa </strong> D. melanogaster tramtrack protein; algorithmic consensus: 1 domain; expert consensus: 2 domains (domain1 103-138; domain2 139-165), <strong>L. 1bbo </strong><em>human enhancer binding protein Mbp-1 </em>; algorithmic consensus: 1 domain; expert consensus: 2 domains (domain1 1-25; domain2 29-57), <strong>M. <em>1zaa </em></strong><em> mouse Zif268 immediatealy early gene </em>; algorithmic consensus: 1 domain; expert consensus: 3 domains (domain1 3-31; domain2 33-60; domain3 61-87). </p>
        <p><strong>4.2 Cases of chains in which expert consensus is different from algorithmic consensus. </strong></p>
        <p>There are 3 chains in the 467-chain dataset for which both experts and algortithms reach consensus, however, the consensuses are different. All three cases involve short DNA-binding proteins consisting of 2 ( <strong><em>2drpa </em></strong> Figure 7K, <strong><em>1bbo </em></strong> Figure 7L) or 3 consecutively repeated ( <strong><em>1zaa </em></strong> Figure 7M) Zn-finger motif. Because individual domains are less than 35 residues long (which is probably a minimum size of domain as defined by algorithms), algorithmic methods leave the chain uncut, in spite of the well-recognized architecture of the Zn-finger motif. Expert methods however, identify each Zn-finger as an individual domain. This indicates that current automatic methods are not sophisticated enough to catch very small, but well-characterized domains. </p>
        </div>
		<div id="textsubheading"><a name="Only automataic methods">What do only automatic methods capture well? </a></div>
		<div id="textinfo">
        <p>The subset <strong><em>algorithmic only consensus </em></strong> ( <a href="resources/ven_diagram.jpg">Figure 2 </a> in <a href="approach.php">consensus approach </a>) contains 43 chains and may provide some insight into the reasons for disagreements among expert methods. This subset contains 49% (21) single-domain chains, 46.5% (20) 2-domain chains and 4.5% (2) 3-domain chains. In the majority of cases, only one of the expert methods (SCOP or AUTHORS) disagrees with the algorithmic consensus, while the other two expert methods agree with it (61% of 43 chains). CATH in most of the cases sides either with SCOP or with AUTHORS and rarely disagrees with both of them. </p>
        <p>The largest fraction – 40% (17 chains) comprises cases in which algorithmic consensus agrees with AUTHORS and CATH, but disagrees with SCOP. In the majority of cases (15 out 17), algorithmic consensus partitions chains into two domains, while SCOP does not. In most of these cases, the assignment by the algorithms are reasonable, since the domains are spatially separated and contact density between domains is low (Figure 2A, 2B). There are multiple SCOP folds contributing to this phenomenon, however, among them there is a disproportional contribution from periplasmic-binding protein-like I and II folds (Figure 2A). In the majority of the cases splitting the chain into domains causes non-continuous domains (i.e., the chain will cross more than once between two domains, see legend of Figure 1 below). In two cases algorithms (as well as AUTHORS and CATH) keep the chain intact, while SCOP separates chains into 2 domains; both cases involve short chains and small domains with little secondary structure (Figure 2C). In 7 cases (15% of chains) the algorithmic consensus agrees with SCOP assignment and disagrees with AUTHORS and CATH assignments. Most of the chains belong to the trypsin-like serine protease fold (Figure 2D). We conclude that in these cases the domains are packed too closely and cannot be split successfully by any one of the algorithms. </p>
        <p>Another fraction – 24% of chains (10 chains) - are those in which algorithmic consensus disagree with AUTHORS, but agrees with SCOP and CATH. This fraction is interesting since five methods (CATH, SCOP and three algorithmic methods) form consensus yet disagree with the AUTHORS assignment. Further discussion can be found below in the section “Why experts disagree”. For the majority of these cases it appears that AUTHORS overcuts the chain either by cutting off small domains (Figure 2F) or by cutting through a densely packed structure (Figure 2G). This indicates that algorithms capture well some aspects of what does not constitute a structural domain. Some assignment cases are less clear-cut: in the case of chain <strong><em>2hpda </em>, </strong>a hemoprotein domain of cytochrome, the additional domain can be justified (Figure 2H), since the structure consist of two spacially distinct parts. Thus, the fact that all algorithms and two expert methods (SCOP and CATH) assign this chain as one domain is surprising. It is not clear whether this case indicates an error by all the algorithms or captures a fundamental principle. </p>
        <p><img src="resources/automatic_methods_only.jpg" width="716" height="720"></p>
        <p><strong>Figure 2. Examples of algorithmic consensus vs. expert methods </strong>. Domain assignments are shown for ten protein chains. For most of the chains only one of the assignments is shown in the figure, however, assignments for all methods are listed below. Unless otherwise specified, the domain boundaries are given by the AUTHORS method . In the case of one domain assignments, the entire chain is considered to be a domain. <strong>A. </strong><strong>2lao </strong><em>periplasmic lysine/arginine/ornithine-binding protein </em>; SCOP:1 domain, all other methods: 2 domains (domain 1 1-90;191-238, domain 2 91-190); <strong>B . 1pda </strong><em>porphobilinogen deaminase </em>; SCOP: 2 domains (domain 1: 3-219; domain 2: 220-307), all other methods:3 domains (domain 1 3-99, 200-217; domain 2:105-193; domain 3 222-307); <strong>C. </strong><strong>2pf2 </strong><em>Ca-prothrombine fragment 1 </em>; SCOP: 2 domains (domain 1 1-65; domain 2: 66-145), all other methods: 1 domain <strong>; </strong><strong>D. 2sga </strong><em>Streptomyces griseus protease </em>; algorithmic consensus and SCOP: 1 domain, CATH and AUTHORS: 2 domains (domain 1: 16-126; domain 2: 127-242); <strong>E. 1lgaa </strong><em>lignin peroxidase </em>; algorithmic consensus and SCOP: 1 domain, CATH and AUTHORS: 2 domains (domain 1: 1-145, 269-292; domain 2: 146-268, 293-338); <strong>F. 1cpc </strong><em>C-phycocyanin from cyanobacterium Fremyell </em>; AUTHORS: 2 domains (domain 1: 1-34; domain 2: 35-174), all other methods: 1 domain; <strong>G. 1mat </strong><em>cobalt-dependent methionine aminopeptidase </em>; AUTHORS: 2 domains (domain 1: 11-118; domain 2:119-241), all other methods: 1 domain; <strong>H </strong>. <strong>2hpda </strong><em>hemoprotein domain of cytochrome P450BM-3 </em>, AUTHORS: 2 domains (domain 1: 1-70, 329-361; domain 2: 72-325, 390, 457), all other methods: 1 domain; <strong>I. 1tnrr </strong><em>human TNF receptor; </em> SCOP: 3 domains (domain 1: 15-71; domain 2: 72-115; domain 3: 116-153); <strong>J. </strong><strong>1tnrr </strong><em>human TNF receptor; </em> CATH and algorithmic consensus: 2 domains (domain 1: 15-97; domain 2: 98-153; data from CATH); <strong>K. </strong><strong>1tnrr </strong><em>human TNF receptor; </em>AUTHORS: 4 domains (domain 1: 15-52; domain 2: 53-97; domain 3: 98-137; domain 4: 138-153); <strong>L . </strong><strong>1pxta </strong><em>3-ketoacyl-CoA thiolase </em>; algorithmic consensus: 1 domain; <strong>M </strong>. <strong>1pxta </strong><em>3-ketoacyl-CoA thiolase </em>; CATH: 2 domains (domain 1: 28-160, 223-302; domain 2: 174-222, 303-417); <strong>N </strong>. <strong>1pxta </strong><em>3-ketoacyl-CoA thiolase </em>; SCOP: 2 domains (domain 1: 28-293; domain 2:294-417); <strong>O </strong>. <strong>1pxta </strong><em>3-ketoacyl-CoA thiolase </em>; AUTHORS: 3 domains (domain 1 28-153, 276-298; domain 2:154-275; domain 3: 299-417). </p>
        <p>In one case each of the experts produces a different assignment: for <strong><em>1tnrr </em></strong> (tumor necrosis factor, chain R) SCOP assigns 2 domains(Figure 2I), CATH assigns 3 domains (Figure 2J) and AUTHORS assign 4 domains Figure 2K); algorithmic consensus agrees with the CATH assignment. This is a clear example of algorithms, guided by somewhat distinct principles, converging on a domain assignment. Expert assignments may incorporate additional knowledge (besides domain compactness) producing discord. </p>
        <p>Finally, there is an interesting case, <strong><em>1pxta </em></strong>, 3-ketoacyl-CoA thiolase , for which algorithmic consensus does not agree with any of the expert methods: algorithmic methods do not cut the chain (Figure 2L), CATH and SCOP predict 2 domains (Figure 2M, 2N) and AUTHORS predicts 3 domains (Figure 2O). This structure is quite unusual and no two experts agree completely: SCOP and CATH both assign the same number of domains, but partitioning of the domains is different (Figure 2M, 2N). This is an example of a complex architecture that does not lend itself to unambiguous partitioning. </p>
        <p>The consensus among algorithmic assignments can be subdivided into 3 general classes: </p>
        <ol>
		<li>Algorithmic consensus has more domains than one of the expert methods (usually SCOP), the assignment make sense – <em>algorithms are correct. </em></li>
        <li>Algorithmic consensus has fewer domains than one of the expert methods (frequently AUTHORS, but others too) and introduction of additional domains is difficult to justify – <em>algorithms are correct. </em></li>
        <li>Algorithmic consensus does not cut the structure that could or should have been cut (some or all experts cut it) – <em>algorithms have difficulties. </em></li>
        </ol>
		<p>Our criteria for correctness of assignments (above) are subjective, we assume that the assignment is correct if the assigned domains conform to the basic principles of independent structural units (compact structures with hydrophobic core, which can be clearly separated from each other) </p>
        <div id="highlight">In summary, consensus among algorithms frequently gives reasonable partitioning of chains into domains. This consistency indicates that the driving force behind partitioning is retaining the structural integrity of a domain. The lack of consensus among experts implies additional knowledge is coming into play. A fraction of algorithmic consensus results from the algorithms\' universal inability to partition complex architectures (algorithms undercut). </div>
        </div><br>
		<div id="textsubheading"><a name="difficult for automatic methods">What is difficult for automatic methods? </a></div>
		<div id="textinfo">
        <p>Algorithmic methods successfully capture many principles of domain partitioning, consistently providing expert-level assignment in 328 cases (71% of the dataset). Algorithmic methods provide prediction uniformity as seen for the subset of chains for which an algorithmic consensus exists, but expert methods disagree among themselves (44 chains). Difficult cases are those structures for which algorithms cannot reach agreement. This occurs in 94 chains (20% of 467-chain consensus): 45 chains belong to the subset for which expert methods agree on the domain assignment ( <strong><em>expert only consensus </em></strong>); the remaining 49 chains represent cases where there is <strong><em>no consensus </em></strong>either among algorithmic nor among expert methods. </p>
        <p>Structural compactness and structural autonomy of the domains are the major forces behind algorithmic approaches. One difficulty that algorithms encounter is complex structures that do not lend themselves to simple and reasonable partitioning, such as many structures in the <strong><em>no consensus </em></strong> subset. Some complex cases result in three unique assignments by three algorithmic methods ( <strong>1gpb </strong> Figure 3H, 3I, 3J, <strong>1ahva </strong> Figure 3L, 3M, 3N, <strong>5fpba </strong> Figure 3Q, 3R, 3S). In these cases we observe both the inability to partition the structure as well as overcutting of the structure. In general, DALI undercuts in some cases and overcuts in others; PDP keeps the middle ground; and DomainParser tends to undercut (Figure 3). </p>
        <p><img src="resources/automatic_methods_difficult_1.jpg" width="960" height="720"></p>
        <p><img src="resources/automatic_methods_difficult_1b.jpg" width="671" height="337"></p>
        <p><strong>Figure 3. Examples of algorithmic consensus vs. expert methods </strong>. Domain assignments are shown for ten protein chains. For most of the chains only one of the assignments is shown in the figure, however, assignments for all methods are listed below. Unless otherwise specified, the domain boundaries are given by the AUTHORS method . In the case of one domain assignments, the entire chain is considered to be a domain. <strong>A. </strong><strong>2lao </strong><em>periplasmic lysine/arginine/ornithine-binding protein </em>; SCOP:1 domain, all other methods: 2 domains (domain 1 1-90;191-238, domain 2 91-190); <strong>B . 1pda </strong><em>porphobilinogen deaminase </em>; SCOP: 2 domains (domain 1: 3-219; domain 2: 220-307), all other methods:3 domains (domain 1 3-99, 200-217; domain 2:105-193; domain 3 222-307); <strong>C. </strong><strong>2pf2 </strong><em>Ca-prothrombine fragment 1 </em>; SCOP: 2 domains (domain 1 1-65; domain 2: 66-145), all other methods: 1 domain <strong>; </strong><strong>D. 2sga </strong><em>Streptomyces griseus protease </em>; algorithmic consensus and SCOP: 1 domain, CATH and AUTHORS: 2 domains (domain 1: 16-126; domain 2: 127-242); <strong>E. 1lgaa </strong><em>lignin peroxidase </em>; algorithmic consensus and SCOP: 1 domain, CATH and AUTHORS: 2 domains (domain 1: 1-145, 269-292; domain 2: 146-268, 293-338); <strong>F. 1cpc </strong><em>C-phycocyanin from cyanobacterium Fremyell </em>; AUTHORS: 2 domains (domain 1: 1-34; domain 2: 35-174), all other methods: 1 domain; <strong>G. 1mat </strong><em>cobalt-dependent methionine aminopeptidase </em>; AUTHORS: 2 domains (domain 1: 11-118; domain 2:119-241), all other methods: 1 domain; <strong>H </strong>. <strong>2hpda </strong><em>hemoprotein domain of cytochrome P450BM-3 </em>, AUTHORS: 2 domains (domain 1: 1-70, 329-361; domain 2: 72-325, 390, 457), all other methods: 1 domain; <strong>I. 1tnrr </strong><em>human TNF receptor; </em> SCOP: 3 domains (domain 1: 15-71; domain 2: 72-115; domain 3: 116-153); <strong>J. </strong><strong>1tnrr </strong><em>human TNF receptor; </em> CATH and algorithmic consensus: 2 domains (domain 1: 15-97; domain 2: 98-153; data from CATH); <strong>K. </strong><strong>1tnrr </strong><em>human TNF receptor; </em>AUTHORS: 4 domains (domain 1: 15-52; domain 2: 53-97; domain 3: 98-137; domain 4: 138-153); <strong>L . </strong><strong>1pxta </strong><em>3-ketoacyl-CoA thiolase </em>; algorithmic consensus: 1 domain; <strong>M </strong>. <strong>1pxta </strong><em>3-ketoacyl-CoA thiolase </em>; CATH: 2 domains (domain 1: 28-160, 223-302; domain 2: 174-222, 303-417); <strong>N </strong>. <strong>1pxta </strong><em>3-ketoacyl-CoA thiolase </em>; SCOP: 2 domains (domain 1: 28-293; domain 2:294-417); <strong>O </strong>. <strong>1pxta </strong><em>3-ketoacyl-CoA thiolase </em>; AUTHORS: 3 domains (domain 1 28-153, 276-298; domain 2:154-275; domain 3: 299-417). </p>
        <p>In some cases compactness information alone is not sufficient for correct partitioning and functional or fold knowledge is essential (Figure 4). Even then, that is, when experts reach consensus, the results are debatable since it is just not clear how such structures should be partitioned (Figure 4E, 4F). This is addressed below in the section “What are the central issues in the definition of a structural domain?” </p>
        <p><img src="resources/automatic_methods_difficult_2.jpg" width="412" height="550"></p>
        <p><strong>Figure 4. Experts\' consensus versus algorithmic assignments. </strong>Cases where expert reach consensus on the number of domains, however, there is no agreement among algorithmic methods. <strong></strong>Domain boundaries for experts\' consensus are shown using AUTHORS data; domain boundaries are given for each algorithmic method. <strong></strong>In the case of one domain assignments, the entire chain is considered a domain. <strong>A. 2bpa </strong>bacteriophage Phix174 coat protein Gpf <strong>, </strong>experts\' consensus: 1 domain, PDP: 3 domains (domain 1 1-173, 210-297,358-426; domain 2 298-357, domain 3 174-209), DomainParser: 2 domains (domain 1 1-166, 214-296, 357-426; domain 2 167-213, 297-356), DALI: 2 domains (domain 1 1-166, 234-297, 357-426; domain 2 167-213, 297-356); <strong> B. 1pho </strong>E.coli phosphoporin, experts\' consensus: 1 domain, PDP and DomainParser: 2 domains (domain 1 1-100; domain 2 101-340), DALI: 4 domains (domain 1 17-40, 304-340; domain 2 103-121, 180-191, 220-233, 260-280, 296-303; domain 3 1-16, 41-102, 133-158; domain 4 122-132, 159-179, 192-219, 234-259,281-295); <strong> C. 1emd </strong>malate dehydrogenase, experts\' consensus: 2 domains (domain 1 1-148; domain 2 149-309), PDP and DALI: 1 domain, DomainParser: 2 domains (domain 1 1-144; domain 2 145-312); <strong>D. 1gof </strong>galactose oxidase, experts\' consensus: 3 domains (domain 1 1-152; domain 2 153-532, domain 3 542-639), PDP and DomainParser: 2 domains (domain 1 1-150; domain 2 151-639), DALI: 3 domains (domain 1: 1-151; domain 2 152-528, 575-588; domain 3: 529-574, 589-639); <strong>E. 4rcr </strong>photosynthetic reaction center <strong>, </strong>experts\' consensus: 2 domains (domain 1 12-39; domain 2 40-248), PDP: 2 domains (domain 1 25-60; domain 2 83-248), DomainParser: 1 domain, DALI: 2 domains (domain 1 31-80; domain 2 101-248); <strong>F. 1psp </strong>pancreatic spasmolitic polypeptyde <strong>. </strong>experts\' consensus: 2 domains (domain 1 1-56, 99-106; domain 2 57-98); DomainParser and DALI: 1 domain; PDP: 2 domains (domain 1 1-11, 49-106; domain 2 12-48). </p>
        <p>In summary, algorithmic approaches are at a disadvantage in difficult situations where the common principles of domain definition are insufficient and additional information is essential. It is not straightforward to capture this additional information in the form of a consistent algorithm. </p>
        </div>
		<div id="textsubheading"><a name="bechmarking using consensus">Analysis of algorithmic methods: benchmarking using the consensus approach </a></div>
		<div id="textinfo">
        <p>In order to analyze the performance of the algorithmic methods in a consistent way we employ a consensus approach similar to that used by Orengo et al . We analyze the performance of the algorithmic methods on the set of structures for which a consensus expert assignment exists. This approach limits our analysis to the set of well-understood structures. The drawback of this approach, as discussed later, is loss of nearly all structures with complex topology from this benchmarking dataset. This dataset – an experts\' consensus subset – consist of 373 chains (328 in complete consensus subset and 45 in expert only consensus). Figure 4B, shows the result of benchmarking of three algorithms using the experts\' consensus as a reference. Exclusion of the 20% of the chains without experts\' consensus reduces misassignments by 62% in the case of DALI and PDP and by 73% in the case of DomainParser. Exclusion of structures without experts\' consensus mainly affects the undercut misassignments. Intuitively this is understandable, since the majority of chains for which there is no experts\' consensus have complex architectures, which algorithms cannot address and hence often leave uncut. Limiting our investigation to the structures that are well understood and agreed upon by experts permits us to address the following question. What can we improve in the algorithmic methods that experts already capture well? The potential improvements are discussed in the next section “How can we improve algorithmic methods?” First, the specifics of each algorithmic method, as judged by its disagreement with consensus are presented. </p>
        <p><strong></strong><img src="resources/benchmark_consensus.jpg" alt="benchmark_consensus.TIF (504024 bytes)" height="340" width="490"></p>
        <p><strong>Figure 4B. Benchmarking three algorithmic methods using the experts\' consensus subset as a reference. </strong><strong>A </strong>. Fraction of chains that do not agree with consensus assignment. The entire fraction of misassigned chains is shown as well as its individual components: undercut misassignments and overcut misassignments. <strong>B. </strong> Comparing the fraction of misassigned chains, which are benchmarked against the entire 467-chain dataset (using AUTHORS assignment as a reference) versus. the 373-chain experts\' consensus subset. Exclusion of 20% of chains without experts\' consensus reduces the misassignment of chains by <em>DALI </em> and <em>PDP </em> methods by 62% and the misassignment by <em>DomainParser </em>method by 73%. The effect is biased toward misassignments of the undercut type. </p>
        <p><strong>10.1 </strong><a name="pdp_analysis"><strong>PDP<sup>23</sup></strong></a> is based primarily on the principles of domain compactness. When PDP produces erroneous assignments, it tends to predict more domains than the experts\' consensus - there are 12 cases of overcut predictions and 4 cases of undercut predictions. </p>
        <p>The overcut cases are caused primarily by long loops which separate small parts of the chain, which often contain very little secondary structure, from the main body of the domain (Figure 5A-C). The lack of domain compactness triggers illogical splitting of the region into two domains. This situation could be changed by requiring that domains have a certain fraction of the chain present as well formed secondary structure. Small regions of the polypeptide chain are also cut when they protrude out of the main domain. Such partitioning may require splitting one or more helices between two domains (Figure 5D-F). For example, the large a/b structure, cytochrome P450-Terp (Figure 5G, <strong><em>1cpt </em></strong>), is considered to be one domain by experts and other algorithms, whereas PDP divides it into three domains and splits three helices. Setting a higher penalty for splitting secondary/super-secondary structures may alleviate this type of problem. PDP sometimes partitions large symmetric structures that are recognized by experts as one domain, into separate domains. Such partitioning requires, for example, splitting b -sheets between domains (Fig 5I, <strong><em>1pho </em></strong>), splitting interacting b -strands as found in creatine <em></em>amidinohydrolase (Fig 5J, <strong><em>1chm </em></strong>) or splitting a -helices as found in glucoamynase <em>- </em>471 (Fig 5H, <strong><em>3gly </em></strong>). </p>
        <p>The undercut cases (at least 3 out of 4) represent truly difficult situations where domains are either packed too closely (Figure 5K, 5M) or part of one domain is inserted into the other domain (Figure 5L). In all three cases at least one of the other algorithmic methods also generates an incorrect undercut assignment. The last undercut case, M4 apo-lactate dehydrogenase ( <strong><em>6ldh </em></strong>, <em></em>Figure 5N) is unique to PDP, all other algorithms are able to partition the chain into two domains. PDP fails as a result of the large number of contacts between domains as well as a lack of compactness. </p>
        <p><img src="resources/pdp_analysis.jpg" width="924" height="506"></p>
        <strong>
        <p>Figure 5. Inspecting tendencies of PDP&nbsp; method. </p>
        </strong>Chains for which individual algorithmic method disagree with the reference method (AUTHORS) . Assignments are given for the method under investigation and for the reference method. <strong>A . 2plv </strong>PDP: 2 domains (domain 1 26-73, domain 2 74-275), AUTHORS: 1 domain (73-230) <strong>, </strong><strong>B </strong><strong>. 3pgm </strong>PDP: 2 domains (domain 1 1-87, 151-230; domain 2 88-150), AUTHORS 1 domain (1-230), <strong></strong><strong>C. </strong><strong>2bpa </strong>PDP: 3 domains (domain 1 1-173, 210-297, 358-426; domain 2 174-209; domain 3 298-357) AUTHORS: 1 domain (1-426), <strong></strong><strong>D </strong><strong>. 1sesa </strong>PDP: 3 domains (domain 1 1-37, 87-102; domain 2 38-86; domain 3 103-421), AUTHORS: 2 domains (domain 1 1-98; domain 2 99-421), <strong></strong><strong>E. </strong><strong>3adk </strong>PDP: 2 domains (domain 1 1-37, 76-194; domain 2 38-75), AUTHORS 1 domain (1-194), <strong></strong><strong>F </strong><strong>. 1bdm </strong>PDP: 3 domains (domain 1 0-76; domain 2 77-153, 321-332; domain 3 154-320), AUTHORS: 2 domains (domain 1 0-156, domain 2 157-329), <strong></strong><strong>G </strong><strong>. 1cpt </strong>PDP: 3 domains (domain 1 1-132, 305-383; domain 2 163-269; domain 3 133-162, 270-304, 384-428), AUTHORS: 1 domain (1-428), <strong>H . 3gly </strong>PDP: 2 domains <strong></strong>(domain 1 1-14, 226-444; domain 2 15-255, 445-471), AUTHORS: 2 domains (domain 1 1-440; domain 2 441-471), <strong></strong><strong>I. </strong><strong>1pho </strong>PDP: 2 domains (domain 1 1-100; domain 2 101-340), AUTHORS: 1 domain (1-340), <strong></strong><strong>J. </strong><strong>1chm </strong>PDP: 3 domains (domain 1: 2-151; domain 2 152-165, 270-390; domain 3 166-269, 391-402), AUTHORS: 2 domains (domain 1 2-162; domain 2 163-402) , <strong></strong><strong>K </strong><strong>. 1emd </strong>PDP: 1 domain (1-312), AUTHORS: 2 domains (domain 1 1-148; domain 2 149-309), <strong></strong><strong>L </strong><strong>. 1gof </strong>PDP: 2 domains (domain 1 1-150; domain 2 151-639), AUTHORS: 3 domains (domain 1 1-152; domain 2 153-532; domain 3 542-639), <strong></strong><strong>M </strong><strong>. 3cox </strong>PDP: 1 domain (1-506), AUTHORS : 2 domains (domain 1 5-44, 226-316, 462-506; domain 2 45-225, 317-461), <strong></strong><strong>N. </strong><strong>6ldh </strong>PDP: 1 domain (18-329); AUTHORS: 2 domains (domain 1 20-164, domain 2 165-329).
        <p><strong>Domain boundary </strong>: PDP exhibits 21 cases of boundary differences in continuous domains and 25 cases in non-continuous domains compared to AUTHORS assignments. The largest group (20 chains) comprises single domain chains in which N-terminal (13 cases) or C-terminal (7 cases) boundaries do not match the end of the chain. This set also contains two one-domain chains that consist of two fragments each, with the middle fragment of approximately 20 residues unassigned ( <strong><em>2cy3 </em></strong>, <strong><em> 2tmvp </em></strong>). This problem highlights one of the basic inconsistencies between methods: in the single domain cases some methods (SCOP, CATH, DomainParser) assign the entire chain as a domain, while other methods (PDP, DALI, AUTHORS) may leave part of the chain unassigned. PDP assignments sometimes leave short stretches unassigned, but in 11 cases at least 20% of residues are left unassigned. Of these 11, two cases leave 45% and 60% of residues at one of the end of the chain unassigned (Figure 6A-C). Another type of disagreement is partitioning of non-continuous domains; such partitioning often results in an excessive number of fragments per domain. The creation of extra fragments does not necessarily cause severe misassignment. The difference in the number of fragments between two assignments can result in rather minor differences of domain boundaries, as in the case of <strong><em>1fcda </em></strong> (Figure 6E). On the other hand, the misplacement of the boundaries among the domains with the same number of fragments can have dramatic impact as in the case of <strong><em>1tpla </em></strong> (Figure 6D). It is also possible to have identical domain assignment in terms of domain number, but very different assignment when domain boundaries are considered. In the case of bacterioopsin fragment ( <strong><em>2nmr </em></strong>; Figure 6F), both PDP and AUTHORS partition the chain into 3 domains, however the domains are quite different. The C-terminal domain in the AUTHORS assignment consists of a short loop and a helix, comprising 29 residues. In the PDP assignment this small domain appears as a part of the larger domain. At the same time PDP splits a large a/b domain (define by AUTHORS as one) into two domains. </p>
        <p><img src="resources/pdp_boundaries.jpg" width="724" height="389"></p>
        <strong></strong>
        <p><strong>Figure 6. Analysis of domain boundary disagreements for PDP assignment method. </strong></p>
        <div id="highlight">In summary, PDP requires compact domains. Small to medium (35-50 residue) size protruding segments are assigned to separate domains and secondary structures are often split. Domains often have multiple fragments and unassigned regions. </div>
        <p><strong>10.2 <a name="DomainParser_analysis">DomainParser <sup>35</sup></a></strong> is based on finding the minimal cut through domain interfaces and gives nine cases of overcut predictions and six cases of undercut predictions when compared to the experts\' consensus. Generally, DomainParser does not split secondary structures nor does it generate domains with very little or no secondary structure. Overcut cases are observed in: (1) sprawled structure with long loops, such as <strong><em>2bpa </em></strong> (Figure 7A), which generates overcut predictions in all three algorithmic methods (DomainParser and DALI predict two domains, while PDP predicts three domains); (2) helical structures with little interaction between helices: ( <strong><em>1myt </em></strong>, Figure 7B and <strong><em>1bmd </em></strong> Figure 7C); and (3) the majority, cases of large domains with extensive b -structures (Figure 7D - 7I). This last group comprises different architectures, but in all cases overcut predictions disregard interactions betweens b -strands and other secondary structures (neighboring b -strand, helix or loop). Five out of six cases in this category are unique to DomainParser ( <strong><em>1dhr </em></strong>, <strong><em>1lap </em></strong>, <strong><em>1hpl </em></strong>, <strong>1tim </strong> and <strong>1mda </strong> Figure 7D - 7H). This may indicate that some assumptions about interactions involving b -structures should be re-evaluated or fine-tuned. </p>
        <p>The undercut cases are truly difficult situations in which expert decisions seem to go against the basic principles of domain definition. In two cases one or more of the domains are too small ( <strong><em>4rcr </em></strong>, Figure 7J and <strong><em>1psp </em></strong>, Figure 14Y), in another case the proposed domain contains little secondary structure and is in close contact with the rest of the structure ( <strong><em>1fcd </em></strong>, Figure 7K). Two more cases involve closely interacting domains ( <strong><em>1gof </em></strong>, Figure 7M and <strong><em>3cox </em></strong>, Figure 7N). One case of undercuting by DomainParser ( <strong><em>1gss </em></strong>, Fig. 7O) is clearly wrong; it involves a chain with two small but spatially separated domains and it is not clear why DomainParser misses it. </p>
        <p><img src="resources/domain_parser_analysis.jpg" width="960" height="720"></p>
        <p><strong>Figure 7. Inspecting tendencies of DomainParser method. </strong>Chains for which individual algorithmic method disagree with the reference method (AUTHORS) . Assignments are given for the method under investigation and for the reference method. <strong>A. </strong>2bpa DomainParser: 2 domains (domain 1 1-166, 214-296, 357-426; domain 2 167-213, 297-356), AUTHORS: 1 domain (1-426), <strong></strong><strong>B. </strong><strong>1myt </strong>DomainParser: 2 domains (domain 1 5-81; domain 2 82-153), AUTHORS: 1 domain (1-152), <strong></strong><strong>C. </strong><strong>1bdm </strong>DomainParser: 3 domains (domain 1 0-71; domain 2 72-152, domain 3 153-332), AUTHORS: 2 domains (domain 1 0-156; domain 2 157-329), <strong>D. 1dhr </strong>DomainParser: 2 domains (domain 1 5-123; domain 2 124-240), AUTHORS: 1 domain (5-240), <strong></strong><strong>E. </strong><strong>1lap </strong>DomainParser: 4 domains (domain 1 1-74; domain 2 75-173; domain 3 174-353; domain 4 354-484), AUTHORS: (domain 1 1-150; domain 2 171-487), <strong></strong><strong>F. </strong><strong>1hpla </strong>DomainParser: 2 domains (domain 1 1-141, domain 2 142-337; domain 3 338-449), AUTHORS: 2 domains (domain 1 1-335; domain 2 336-449), <strong></strong><strong>G. </strong><strong>1tima </strong>DomainParser: 3 domains (domain 1 1-62; domain 2 63-126; domain 3 127-248), AUTHORS: 1 domain (1-248), <strong>H. 1mdah </strong>DomainParser: 3 domains (domain 1 1-199; domain 2 120-205; domain 3 206-368) <strong>I. 1pho </strong>DomainParser: 2 domains (domain 1 1-100; domain 2 101-340), AUTHORS: 1 domain (1-340), <strong></strong><strong>J. </strong><strong>4rcrh </strong>DomainParser: 1 domain (1-237); AUTHORS: 2 domains (domain 1 12-39; domain 2 40-248), <strong></strong><strong>K. </strong><strong>1pspa </strong>DomainParser: 1 domain (1-106), AUTHORS: 2 domains (domain 1 1-56, 99-106; domain 2 57-98), <strong>L. 1fcda </strong>DomainParser: 2 domains (domain 1 1-107, 257-401; domain 2 108-256), AUTHORS: 3 domains (domain 1 1-107, 256-328; domain 2 109-255; domain 3 328-401), <strong></strong><strong>M. </strong><strong>1gof </strong>DomainParser: 2 domains (domain 1 1-151; domain 2 152-639), AUTHORS: 3 domains (domain 1 1-152; domain 2 153-532; domain 3 542-639), <strong></strong><strong>N. </strong><strong>3cox </strong>DomainParser: 1 domain (1-500), AUTHORS: 2 domains (domain 1 5-44, 226-316, 462-506; domain 2 45-225, 317-461), <strong></strong><strong>O. </strong><strong>1gssa </strong>DomainParser: 1 domain (1-209), AUTHORS: 2 domains (domain 1 1-78; domain 2 81-207), <strong></strong><strong></strong></p>
        <p><strong>Domain boundaries:</strong> DomainParser has a surprisingly small number of chains with domain overlap disagreements (11 chains at 95% stringency; 2 chains at 80% stringency). All the chains that disagree on domain boundaries are multi-domain chains and for the majority of the cases at least one domain is non-continuous, that is, split into two or more non-linear fragments. Different placement of the fragment boundaries can result in somewhat different partitioning of the chain into domains, such as separating a single helix out of a helical bundle in <em>1dlc </em> (Figure 8A). The tendency of DomainParser is to avoid splitting domains into fragments, and this results in a suboptimal domain separation ( <em>1gia </em>, Figure 8C). A curious case is that of the human Fc fragment <em>1fc1 </em> (Figure 8B), in which DomainParser assigns more fragments than AUTHORS reference method, but the spatial separation of domains is worse than one achieved in AUTHORS assignment. </p>
        <p><img src="resources/dompain_parser_boundaries.jpg" width="906" height="171"></p>
        <p><strong>Figure 8. Analysis of domain boundary disagreements for DomainParser assignment method. </strong></p>
        <div id="highlight">In summary, DomainParser respects secondary structures and rarely splits them between domains. DomainParser sometimes misses domains of small size or with low secondary structure/size ratio. Overcuts are primarily confined to the chains with extensive b -structures. </div>
        <p><strong>10.3 <a name="DALI_analysis">DALI <sup>36</sup></a></strong> is based on local compactness of the structure as well as recurrence of the structures. There are 21 cases of overcut predictions and 3 cases of undercut predictions when compared to the experts\' consensus. The overcut predictions are chiefly the result of cutting small segments of the structure that are protruding from an otherwise compact domain. The deviation from a compact structure is either caused by loops that move small secondary structures away or by long helices that extend away from the body of the domain. The tendency to overcut is evident in the chains that are predicted by experts\' consensus to be single domain chains ( <strong><em>2tmv </em></strong>, Figure 9A, <strong><em>3pgm </em></strong>, Figure 9B, <strong><em>1caj </em></strong>, Figure 9C, <strong><em>1rve </em></strong>, Figure 9D, <strong><em>1xim </em></strong>, Figure 9G) as well as those that are predicted by experts\' consensus to be multi-domain chains ( <strong><em>1dlc </em></strong>, Figure 9J, <strong><em>1trk </em></strong>, Figure 9K, <strong><em>3cox </em></strong>, Figure 9L, <strong><em>1gla </em></strong>, Figure 9M). Usually the small regions that are split off larger domains are assigned a status of separate domains, however, there are also cases when such regions are left unassigned ( <strong><em>1xima </em></strong>, Figure 9G, <strong><em>1bcg </em></strong>, Figure 9F <em><strong>, 1trk </strong></em>, Figure 9K, <strong><em>3grs </em></strong>). </p>
        <p>Some overcut cases involve b - or mainly b -structures ( <strong><em>1mdc </em></strong>, Figure 9H, <strong><em>2pol </em></strong>, Figure 9N and <strong><em>1pho </em></strong>, Figure 14E. If we also consider cases for which there is no consensus, we observe that DALI tends to undercut in the cases where b -structures are present ( <strong><em>2snv </em>, </strong> Figure 9O, <strong><em>12sl </em></strong>, Figure 9P, <strong><em>1hfh </em></strong>, Figure 9Q, <strong><em>1smra </em></strong>, Figure 9R). Frequently DALI partitioning involves excessive fragmentation of the individual domains into multiple, often very short, fragments ( <strong><em>3cox </em></strong>, Figure 9L, <strong><em>1gla </em></strong> Figure 9M, <strong><em>2tpr </em></strong>, <strong><em>1pho </em></strong>, Figure 9E, <strong><em>2tmv </em></strong>, Figure 9A, <strong><em>2pol </em></strong>, Figure 9N, <strong><em>1caj </em></strong>, Figure 9C, <strong><em>2por </em></strong>, <strong><em>3pgm </em></strong>, Figure 9B, <strong><em>1mdc </em></strong>, Figure 9H, <strong><em>3grs </em></strong>, <strong><em>3lad </em></strong>). There is also a tendency to cut through the secondary structures ( <strong><em>2pol </em></strong>, <strong><em>1bcg </em></strong>, <strong><em>1mdc </em></strong>, <strong><em>1gla </em></strong>, <strong><em>3adk </em></strong>, <strong><em>1pho </em></strong>, <strong><em>3pgm </em></strong>, <strong><em>2trp </em></strong>). The overcut cases could be reduced drastically if a more stringent rule regarding the partitioning of a domain into fragments was implemented. A higher penalty for splitting secondary structure between two domains could also reduce the fraction of overcut type predictions. </p>
        <p><img src="resources/dali_analysis.jpg" width="960" height="720"></p>
        <p><img src="resources/dali_analysis_2.jpg" width="936" height="188"></p>
        <p><strong>Figure 9. Inspecting tendencies of DALI &nbsp; method. </strong>Chains for which individual algorithmic method disagree with the reference method (AUTHORS) . Assignments are given for the method under investigation and for the reference method. <strong>A. 2tmv </strong>DALI: 2 domains (domain 1 5-11, 55-68, 139-153; domain 2 14-54, 69-138), AUTHORS: 1 domain (1-154), <strong></strong><strong>B. </strong><strong> 3pgm </strong>DALI: 2 domains (domain 1 1-10, 27-81, 159-230; domain 2 11-26, 82-158), AUTHORS: 1 domains (1-230), <strong></strong><strong>C. </strong><strong> 1caj </strong>DALI: 2 domains (domain 1 26-148, 173-216, 242-261; domain 2 149-172, 217-241), AUTHORS: 1 domain (3-261), <strong></strong><strong>D </strong><strong>. 1rvea </strong>DALI: 3 domains (domain 1 2-18, 36-139, 165-205; domain 2 19-35, 140-164; domain 3 206-245), AUTHORS: 1 domain (2-245), <strong></strong><strong>E. </strong><strong> 1pho </strong>DALI: 4 domains (domain 1 17-40, 304-340; domain 2 103-121, 180-191, 220-233,260-280, 296-303; domain 3 1-16, 41-102, 133-158; domain 4 122-132, 159-179, 192-219, 234-259, 281-295), AUTHORS: 1 domain (1-340), <strong></strong><strong>F. </strong><strong> 1bgc </strong>DALI: 2 domains (domain 1 9-35, 88-111; domain 2 57-87, 122-173), AUTHORS: 1 domain (9-173), <strong></strong><strong>G. </strong><strong> 1xima </strong>DALI: 2 domains (domain 1 3-320; domain 2 321-394), AUTHORS: 1 domain (3-328), <strong></strong><strong>H </strong><strong>. 1mdc </strong>DALI: 2 domains (domain 1 1-13, 35-67, 104-131; domain 2 14-33, 68-103), AUTHORS: 1 domain (1-132), <strong></strong><strong>I. </strong><strong> 1rvea </strong>DALI: 3domains (domain 1 2-18, 36-139, 165-205; domain 2 19-35, 140-164; domain 3 206-245), AUTHORS: 1 domain (2-245), <strong></strong><strong>J. </strong><strong> 1dlc </strong>DALI: 4 domains (domain 1 80-184, domain 2 185-289; domain 3 290-301, 502-644; domain 4 302-501), AUTHORS: 3 domains (domain 1 61-292; domain 2 293-300, 497-644, domain 3 301-496), <strong></strong><strong>K </strong><strong>. 1trka </strong>DALI: 4 domains (domain 1 30-264, domain 2 3-29, 265-288; domain 3 3345-534; domain 4 535-680), AUTHORS: 3 domains (domain 1 3-322; domain 2 323-538; domain 3 539-680), <strong></strong><strong>L. </strong><strong> 3cox </strong>DALI: 5 domains (domain 1 10-48, 109-119, 227-317, 450-480, 493-506; domain 2 176-190, 318-332, 346-449; domain 3 157-175,191-226, 337-345; domain 4 55-96;m domain 5 120-156, 481-492), AUTHORS: 2 domains <strong></strong>(domain 1 5-44, 226-316, 462-506; domain 2 45-225, 317-461), <strong></strong><strong>M. </strong><strong>1glag </strong>DALI: 4 domains (domain 1 4-36, 48-84, 216-249, 436-462; domain 2 262-271, 304-435, 463-488; domain 3 250-261, 272-303; domain 4 37-47, 84-215), AUTHORS: 2 domains (domain 1 5-253; domain 2 254-501), <strong>N. </strong>2pol DALI: 4 domains (domain 1 1-15,26-45,56-116; domain 2 16-25, 46-55, 117-132, 198-236; domain 3 133-197, 237-249; domain 4 250-366), AUTHORS: 3 domains (domain 1 1-121; domain 2 121-249; domain 3 250-366). <strong></strong></p>
        <p>None of the three undercut predictions are unique to DALI. One case, <strong><em>1psp </em></strong> Figure 14Y, involves a small domain with little secondary structure that AUTHORS divides into two domains, while DALI and DomainParser keep it intact. Another case involves assigning a helix and a very short b -sheet to a separate domain by AUTHORS ( <strong><em>1fcd </em></strong> Figure 14Z), which DALI and DomainParser do not do. This case is surprising since DALI frequently separates a few small structures into a separate domain. The last case ( <strong><em>1emd </em></strong>, Figure 14K) involves closely packed and interacting domains, which cannot be separated by DALI or PDP. All these cases of undercut predictions can be justified as they contradict one or more basic designs of structural domain architecture. </p>
        <p><strong>Domain boundaries </strong>: DALI produces the largest number of chains with disagreement on the placement of the domain boundaries (52 cases at 95% stringency, 22 cases at 80% stringency). The largest fraction of misplaced boundaries are for single domain assignments, where DALI often leaves a significant section of the domain, large ( <strong><em>1byh </em></strong>, Figure 10A) or small ( <strong><em>1snc </em></strong>, <strong><em>3teci </em></strong>, Figure 10B, C), unassigned. In over 50% of the cases the unassigned portions exceeds 15% of the chain length. In the cases of non-continuous domains DALI tends to split domains into more fragments as well as leave some segments unassigned, often attaining cleaner separation of domains ( <strong><em>6ldh </em></strong>, Figure 10D). In some cases additional fragments produced by DALI in combination with very different placement of the domain boundaries results in drastically different domain assignments ( <strong><em>4tms </em></strong>, Figure 10E). The only cases where DALI partitions domains into less fragment than the reference method is when no assignment is made ( <strong><em>1pfka </em></strong>, Figure 10F). </p>
        <p><img src="resources/dali_boundaries.jpg" width="716" height="306"></p>
        <p><strong>Figure 10. Analysis of domain boundary disagreements for DALI assignment method. </strong></p>
        <div id="highlight">In summary, DALI favors compact domains resulting in frequent overcutting of the chain and non-continuous domains that consist of many (often small) fragments which also split secondary structures. Excessive fragmentation may leave the number of domains intact, but results in disagreement on their precise position. The effect is more pronounced in one domain chains, where a significant fraction of the chain may be left unassigned. </div><br>
        </div>
		<div id="textsubheading"><a name="Improving automatic methods">How can we improve automatic methods ? </a></div>
		<div id="textinfo">
        <p>From the analysis of the structures for which experts\' consensus exist, we observe that overcut predictions are more frequent than undercut predictions for all algorithmic methods. Both PDP and DALI emphasize compact domains, thus they have a tendency to cut off portions of the chain that break this compactness and assign the cut-off segment to a separate domain. Unlike DALI, PDP does not partition the chains into domains when the partitioning results in domains with many fragments (3 or more). Consequently, PDP has 60% less overcut predictions than DALI. The tendency of the algorithms to overcut structures is likely from two effects: (1) the initial assumptions of the algorithms regarding structural compactness and (2) the large fraction of small domains present in the training data. DomainParser has a significantly lower fraction of overcuts. Overcuts in DomainParser occur when chains (usually large) get divided into multiple domains probably due to the underestimation of the interaction of b -strands with other secondary structures. Cases of undercut predictions are less frequent for all methods; most of the chains that cause undercuts are exceptions from standard structural domain definitions and thus require additional knowledge for successful prediction. Undercuts are also common in the cases of very complex architectures, where it is not necessarily the domain compactness, but the shear complexity of the domain interfaces that presents a problem. To tackle this issue it is necessary to have more examples of structures of complex architectures with experts\' consensus on domain assignment. Given the current dearth of complex structures, algorithms cannot be trained nor validated. It would be possible, however, for the algorithmic method to either opt out of partitioning of complex structures (when recognized as such) or to provide a level of confidence associated with assignments. </p>
        <div id="highlight">In summary, algorithmic method place exaggerated importance on domain compactness and combined with misinterpretation of b -sheet interactions cause overcutting of structures by all methods. The incorporation of training from large folds might prevent overcutting. Conversely, undercutting due to the closely packed domains might be improved if functional information can be incorporated. Further, improvements, particularly in the cases of complex architectures, will require a significantly larger dataset of multi-domain structures for which experts\' consensus exists.</div>
      </div></td>
		</tr>
	  </table>';
	
	
	PrintFooter();
?>
